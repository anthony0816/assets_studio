// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// datasource db {
//   provider  = "sqlite"
//   url       = env("sqlite_db")
// }



enum USER_ROLL{
  admin
  client
}

enum ASSETS_CATEGORIAS {
  object
  character
  nature
  city
  surfaces
  other
}

enum REPORT_TYPES{
  InappropriateContent
  Spam
  DataError
  Abuse
  Bug
  Fraud
  other
}

model user {
  uid String @id @default(cuid()) 
  avatar String @default("")
  longName String
  name String @unique
  password String
  email String @unique
  roll USER_ROLL @default(client)
  providerId String @default("local")
  createdAt DateTime @default(now())
}

model Asset{
  id Int @id @default(autoincrement())
  likes Like[]
  reports Report[]
  coments Coment[]
  createdAt DateTime @default(now())
  src String
  user_id String
  user_providerId String
  categoria String @default("other")
  public_id String 
  format String
  tags AssetTag []
}

model AssetTag{
  id Int @id @default(autoincrement())
  name String @unique 
  assets Asset []
}

model Report{
id Int @id @default(autoincrement())
user_id String
type REPORT_TYPES
description String @default("")
asset_id Int
asset Asset @relation(fields: [asset_id], references: [id], onDelete: Cascade)
}

model Like {
  id Int @id @default(autoincrement())
  user_id String
  asset_id Int
  asset Asset @relation(fields: [asset_id], references: [id], onDelete: Cascade)
}

model Coment {
  id Int @id @default(autoincrement())
  user_id String
  username String 
  userPhotoUrl String @default("none")
  asset Asset @relation(fields: [asset_id], references: [id], onDelete: Cascade)
  asset_id Int
  content  String
  createdAt DateTime @default(now())
  likes ComentLike[]
}

model ComentLike{
  id Int @id @default(autoincrement())
  user_id String
  coment_id  Int
  coment Coment @relation(fields: [coment_id], references: [id], onDelete: Cascade)
}

model VerificationCode{
  id Int @id @default(autoincrement())
  email String @unique
  code String
  expiresAt DateTime
  createdAt DateTime
  used Boolean @default(false)
}

model Notifications{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  message String
  redirectionUrl String
  user_id String
  read Boolean @default(false)
}





model user_avatar_cache {
  user_id String @id
  avatarUrl String
}

model opengameart_title_url{
  url String @id 
  title String
  title_es String
  preview_file_name String // se usa para referenciar la preview de la busqueda 
}

model opengameart_title_url_cached_page{
  numPage Int @id
}